4장 롬복과 리팩터링

** 4.1 롬복이란?

롬복을 사용하면 필수 코드를 간편하게 작성할 수 있음

로깅 기능을 통해 println() 문 개선 가능

로깅이란?

프로그램의 수행과정을 기록으로 남기는 것

** 롬복의 기능

@Date	==	코드 반복 최소화

@Slf4j	==	로깅 기능 지원

** 리팩터링이란?

코드의 기능에는 변함이 없이 코드의 구조 또는 성능을 개선하는 작업

** 4.2 롬복을 활용해 리팩터링하기

4장 롬복과 리팩터링 요약

1. 롬복

코드를 간소화해주는 라이브러리

롬복을 사용하면 여러 필수 코드가 반복되는 것을 최소화 할 수 있고 println()문을 로깅 기능으로 대체할 수 있음

2. 로깅

프로그램의 수행 과정을 기록으로 남기는 것

3. 리팩터링

코드의 기능에는 변함이 없이 코드의 구조 또는 성능을 개선하는 작업

리팩터링하면?	==	코드의 가독성이 좋아지고 길이도 짧아져서 개발 시간 단축 가능

4. @AllArgsConstructor

클래스 안쪽의 모든 필드를 매개변수로 하는 생성자를 만드는 어노테이션

@AllArgsConstructor 를 사용하면 별도의 생성자를 만들지 않아도 됨

5. @ToString

toString() 메소드를 사용한 것과 똑같은 효과를 냄

별도의 toString() 메소드를 사용하지 않아도 됨

6. @Slf4j

Simple Logging Facade for Java의 약자

로깅 할 때 사용

로깅 기능으로 로그를 찍으면 나중에라도 그동안 찍힌 로그를 찾아볼 수 있음

로그를 찍을때는 log.info() 문을 사용