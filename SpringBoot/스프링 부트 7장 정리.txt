7장 게시글 수정 과정

1) <수정 페이지> 만들고 기존 데이터 불러오기

2) 데이터를 수정해 DB에 반영한 후 결과를 볼 수 있게 <상세 페이지>로 리다이렉트 하기


1단계 <수정 페이지> 만들고 기존 데이터 불러오기

1) <상세 페이지> 에서 [Edit] 버튼을 클릭

2) 요청을 받은 컨트롤러는 해당 글의 id로 DB 에서 데이터를 찾아 가져옴

3) 컨트롤러는 가져온 데이터를 뷰에서 사용할 수 있도록 모델에 등록함

4) 모델에 등록된 데이터를 <수정 페이지>에서 보여줌
   그러면 사용자가 내용을 수정 할 수 있는 상태가 됨

2 단계 데이터를 수정해 DB에 반영한 후 결과를 볼 수 있게 <상세 페이지>로 리다이렉트 하기

1) 폼 데이터(수정 요청 데이터)를 DTO에 담아 컨트롤러에서 받음

2) DTO를 엔티티로 변환함

3) DB에서 기존 데이터를 수정 데이터로 갱신함

4) 수정 데이터를 <상세 페이지>로 리다이렉트 함.

7.2.1 <수정 페이지> 만들기


*** <a href="articles/{{article.id}}/edit">Edit</a>

href 속성 값의 URL을 보면 id가 article의 속성이므로 {{ariticle.id}}로 표시

보통 article의 사용 범위를 {{#article}} {{/article}} 형식으로 지정한 경우에는

{{id}} 만 써도 되지만 범위를 따로 지정하지 않았다면 점(.)을 사용해 {{article.id}} 라고 표시 해야함.

두 표기 방식의 차이점 기억해두기.


7.2.2 Edit 요청을 받아 데이터 가져오기

edit() 메소드 기본 틀 만들기

** 수정할 데이터 가져오기

1) DB에서 데이터를 가져올 때는 레포지토리를 이용

articleRepository의 findById(id) 메소드로 데이터를 찾아 가져옴
만약 데이터를 찾지 못하면 null을 반환하고, 데이터를 찾았다면 Article 타입의 articleEntity로 저장

2) 코드를 작성하고 나면 findById(id)에서 괄호 안의 id가 빨간색으로 표시됨.
메소드에서 id라는 변수가 선언되지 않았기 때문임.

id는 메소드의 매개변수로 받아오고 자료형은 Long으로 작성
그리고 GetMapping() 어노테이션의 URL 주소에 있는 id를 받아오는 것이므로
@PathVariable 어노테이션을 추가.

** 모델에 데이터 등록하기

DB에서 데이터를 가져왔으니 뷰 페이지에서 사용할 수 있도록 모델에 데이터를 등록.

1) 모델을 사용하기 위해 메소드의 매개변수로 model 객체를 받아옴

2) addAttribute() 메소드로 모델에 데이터를 등록

article 이라는 이름으로 앞에서 가져온 articleEntity를 등록

이렇게 하면 DB에서 가져온 데이터를 article 이라는 이름으로 뷰 페이지에서 사용할 수 있음

7.2.3 수정 폼 만들기




7.3 수정 데이터를 DB에 갱신하기

데이터를 수정해 DB에 반영 한 후 결과를 볼 수 있게 상세페이지로 리다이렉트 하는 것

클라이언트와 서버 간 처리 흐름 4가지

1) MVC	서버 역할을 분담해 처리하는 기법

2) JPA	서버와 DB 간 소통에 관여하는 기술

3) SQL	DB 데이터를 관리하는 언어

4) HTTP	데이터를 주고받기 위한 통신 규약

MVC, JPA, SQL 이 유기적으로 동작하는 것은 HTTP의 요청과 응답으로 시작되고 끝남

7.3.1	HTTP 메소드

클라이언트와 서버 간에 데이터를 전송할 때는 다양한 통신 규약, 즉 프로토콜을 따름

프로토콜은 컴퓨터 간에 원활하게 통신하기 위해 사용하는 전 세계 표준.

각종 신호 처리 방법, 오류 처리, 암호, 인증 방식 등을 규정하고 있기 때문에 
이를 따라야만 오류나 지연 없이 원활하게 통신 가능

** 프로토콜의 종류

FTP	==	파일 전송

SMTP	==	이메일 전송

HTTP	==	웹 서비스에 사용하는 프로토콜

** HTTP의 대표적인 메소드

POST	==	데이터 생성 요청

GET	==	데이터 조회 요청

PATCH(PUT)	==	데이터 수정 요청

DELETE	==	데이터 삭제 요청

** 데이터 생성, 조회, 수정, 삭제는 데이터 관리에서 가장 기본이 되는 동작

==	CRUD ( Create Read Update Delete )

		SQL			HTTP
데이터 생성	INSERT			POST

데이터 조회	SELECT			GET

데이터 수정	UPDATE			PATCH(PUT)

데이터 삭제	DELETE			DELETE

7.3.2 더미 데이터 설정하기

서버를 껏다 켤 때마다 매번 데이터를 입력하는게 번거로움을 개선
== 더미(dummy) 데이터를 자동 생성

7.3.3 <수정 페이지> 변경하기

edit.mustache

action과 method 속성 눈여겨 보기.

action 속성은 폼 데이터를 어디로 보낼지 URL을 지정

method 속성은 어떻게 보낼지 방식을 지정

HTTP 메소드를 활용하면 데이터를 조회할지(GET) 새로 만들지(POST), 수정 할지(PATCH), 삭제할지(DELETE)

**	<form> 태그는 옛날에 만들엊진 규격이라 PATCH 메소드를 지원하지 않음
	<form> 태그는 GET과 POST 메소드만 지원함

수정 폼에서 서버로 보낼 데이터가 하나 더 있음	id
id가 몇 번인 article을 수정하는지 알려줘야함.

<input> 태그를 만들어 value="{{id}}" 속성을 추가

7.3.4 수정 데이터 받아오기

update() 메소드 기본 틀 만들기

수정데이터를 DTO에 담기


7.3.5 DB에 저장하고 결과 페이지로 리다이렉트 하기.

1. DTO를 엔티티로 변환하기

2. 엔티티를 DB에 저장하기

3. 수정 결과 페이지로 리다이렉트하기

** DTO를 엔티티로 변환하기

1) ArticleForm 클래스에서 DTO를 엔티티로 변환하는 toEntity() 메소드를 만듦
	따라서 form.toEntity() 메소드를 호출해 그 반환값을 Article 타입의 articleEntity라는 이름으로 받음

2) DTO가 엔티티로 잘 변환됐는지 확인하는 로그 찍기

** 엔티티를 DB에 저장하기 (2단계로 나누어 진행)

1단계) 데이터를 새로 생성하는 게 아니라 수정하는 것
(기존 데이터를 바꾼다는 말)
DB에서 기존 데이터를 가져와야 함.
이때는 레포지토리를 이용해 articleRepository.findById() 메소드를 호출

1) findById() 메소드는 레포지토리가 자동을 제공하는 메소드,
괄호 안에는 찾는 id 값을 작성 
가져온 artiicleEntity에 getId() 메소드를 호출해 id 값을 집어넣음
즉, id가 1번인 경우 findById(1), 2번인 경우 findById(2)가 될 수 있도록 findById(articleEntity.getId())로 작성

2) findById(articleEntity.getId()) 메소드를 호출해 반환받은 데이터를 Article 타입의 target 변수에 저장

3) 데이터가 없다면 null을 반환

2단계) DB에서 기존 데이터를 가져오고 나면 기존 데이터의 값을 갱신하는 코드를 작성






